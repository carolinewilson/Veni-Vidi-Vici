{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/budgetPlanner.js","js/services/flightService.js","js/controllers/locations.js","js/models/locations.js","js/controllers/locationsForms.js","js/controllers/locationsShow.js","js/controllers/main.js","js/models/trips.js","js/services/tripService.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","BudgetPlannerController","Location","Trip","FlightService","TripService","getFlights","endDate","moment","budgetPlanner","newTrip","departDate","add","format","console","log","createTrip","totalCost","flightCost","expenses","accomCost","totalSavings","location","_id","loggedIn","isLoggedIn","$update","saveTrip","alert","isAuthenticated","get","params","returnDate","origin","destination","closestAirport","destAirportCode","airportCode","duration","$http","getPrice","method","response","data","LocationsIndexController","locationsIndex","all","query","$resource","id","update","LocationsNewController","createLocation","locationsNew","images","tempImage","one","two","three","save","LocationsEditController","locationsEdit","LocationsShowController","locationsShow","MainController","logout","main","$window","tripData","localStorage","setItem","JSON","stringify","getTrip","parse","getItem","deleteTrip","removeItem","angular","module","config","$inject","$","document","ready","on","e","toggleClass","preventDefault","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('travelApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider){\n  $stateProvider\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('locationsNew', {\n      url: '/locations/new',\n      templateUrl: '/templates/locationsNew.html',\n      controller: 'LocationsNewController as locationsNew'\n    })\n    .state('locationsEdit', {\n      url: '/locations/:id/edit',\n      templateUrl: '/templates/locationsEdit.html',\n      controller: 'LocationsEditController as locationsEdit'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'LocationsIndexController as locationsIndex'\n    })\n    .state('locationsShow', {\n      url: '/locations/:id',\n      templateUrl: '/templates/locationsShow.html',\n      controller: 'LocationsShowController as locationsShow'\n    })\n    .state('budgetPlanner', {\n      url: '/locations/:id/budget',\n      templateUrl: '/templates/budgetPlanner.html',\n      controller: 'BudgetPlannerController as budgetPlanner'\n    });\n  $urlRouterProvider.otherwise('/');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider){\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n// menu\n$(document).ready(function(){\n  $('.sliding-panel-button,.sliding-panel-fade-screen,.sliding-panel-close').on('click touchstart',function (e) {\n    $('.sliding-panel-content,.sliding-panel-fade-screen').toggleClass('is-visible');\n    e.preventDefault();\n  });\n});\n","angular.module('travelApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('travelApp')\n  .controller('BudgetPlannerController', BudgetPlannerController);\n\nBudgetPlannerController.$inject= ['Location','Trip','$state', 'FlightService', '$auth', 'TripService'];\nfunction BudgetPlannerController(Location, Trip, $state, FlightService, $auth, TripService) {\n  const budgetPlanner = this;\n\n  budgetPlanner.isLoggedIn = $auth.isAuthenticated;\n  budgetPlanner.newTrip = {};\n\n  Location.get($state.params, (location) => {\n    budgetPlanner.newTrip = {\n      departDate: moment('2017-01-01').format('MMM YYYY'),\n      returnDate: '2017-01-20',\n      origin: 'LGW',\n      destination: location.closestAirport,\n      destAirportCode: location.airportCode,\n      duration: 1,\n      flightCost: 0,\n      accomCost: 0,\n      expenses: 0,\n      totalSavings: 0,\n      totalCost: 0\n    };\n  });\n\n  function getFlights() {\n\n    // budgetPlanner.newTrip.flightCost = 500;\n    // console.log(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate);\n\n    // make sure start date is in format YYYY-MM-DD\n\n    // add duration to start date to get end date\n    const endDate = moment(budgetPlanner.newTrip.departDate).add(30, 'days').format('Do MMMM YYYY');\n    console.log(endDate);\n\n    // if no results, add 7 days to start date and end date\n\n\n\n    // FlightService\n    //   .getPrice(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate)\n    //   .then(\n    //     successResponse => {\n    //       if (successResponse.totalPrice === 0) {\n    //         console.log('no results found');\n    //\n    //         // Re-run search with different date if no flights found\n    //\n    //         FlightService\n    //           .getPrice(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate)\n    //           .then(successResponse => {\n    //\n    //           }, errorResponse => {\n    //\n    //           });\n    //\n    //       // If flights found, update newTrip with price\n    //       } else {\n    //         budgetPlanner.newTrip.flightCost = successResponse.totalPrice;\n    //       }\n    //     },\n    //     errorResponse => {\n    //       console.log('Could not retrieve price:', errorResponse);\n    //     }\n    // );\n  }\n\n  function createTrip() {\n    // Calculate total cost\n    budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n    // Get the location id\n    budgetPlanner.newTrip.location = budgetPlanner.location._id;\n\n    console.log(budgetPlanner.newTrip);\n\n    // Check if user is logged in\n    const loggedIn = budgetPlanner.isLoggedIn();\n    // Trip.save(budgetPlanner.newTrip, () => {\n    //   console.log('saved!');\n\n      if (loggedIn) {\n        console.log('Logged in!');\n        // if user is logged in, add reference to user\n        budgetPlanner.newTrip.$update(() => {\n          console.log(budgetPlanner.newTrip);\n        });\n      } else {\n        console.log('Logged out!');\n        // if user isn't logged in, add trip id to local storage, get them to sign in, then add reference to user id to trip (id from local storage)\n        TripService.saveTrip(budgetPlanner.newTrip);\n        // now go to login/register\n        alert('You need to be signed in to save a trip');\n        $state.go('register');\n      }\n    // });\n\n  }\n\n  budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n  budgetPlanner.createTrip = createTrip;\n  budgetPlanner.getFlights = getFlights;\n}\n","angular.module('travelApp')\n  .service('FlightService', FlightService);\n\nFlightService.$inject = ['$http'];\nfunction FlightService($http) {\n\n  function getPrice(origin, destination, departDate, returnDate) {\n\n    return $http({\n      method: 'GET',\n      url: '/flights',\n      params: {\n        origin,\n        destination,\n        departDate,\n        returnDate\n      }\n    }).then(function successCallback(response) {\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getPrice = getPrice;\n}\n","angular.module('travelApp')\n  .controller('LocationsIndexController', LocationsIndexController);\n\nLocationsIndexController.$inject = ['Location'];\n\nfunction LocationsIndexController(Location) {\n  const locationsIndex = this;\n\n  locationsIndex.all = Location.query();\n  console.log(locationsIndex);\n}\n","angular.module('travelApp')\n  .factory('Location', Location);\n\nLocation.$inject = ['$resource'];\nfunction Location($resource) {\n  return new $resource('/locations/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .controller('LocationsEditController', LocationsEditController)\n  .controller('LocationsNewController', LocationsNewController);\n\n//////new\nLocationsNewController.$inject = ['Location', '$state'];\n\nfunction LocationsNewController(Location, $state) {\n  const locationsNew = this;\n  locationsNew.location = {};\n\n  function createLocation() {\n    locationsNew.location.images = [locationsNew.location.tempImage.one, locationsNew.location.tempImage.two, locationsNew.location.tempImage.three];\n    Location.save(locationsNew.location, () => {\n      $state.go('login');\n    });\n  }\n  locationsNew.createLocation = createLocation;\n}\n\n//edit\nLocationsEditController.$inject = ['Location', '$state'];\n\nfunction LocationsEditController(location, $state) {\n  const locationsEdit = this;\n  locationsEdit.location = location.get($state.params);\n\n  function update() {\n    location.update({ id: locationsEdit.location._id }, locationsEdit.location, () => {\n      $state.go('login', $state.params);\n\n\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('travelApp')\n  .controller('LocationsShowController', LocationsShowController);\n\nLocationsShowController.$inject = ['Location', '$state'];\n\nfunction LocationsShowController(Location, $state) {\n  const locationsShow = this;\n\n  locationsShow.location = Location.get($state.params);\n  console.log(locationsShow.location);\n\n}\n","angular.module('travelApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\n//MainController.$inject = ['$auth', '$state', '$rootScope'];\n//function MainController($auth, $state, $rootScope) {\n\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  // main.message = null;\n  // const protectedStates = ['filmsEdit', 'filmsNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n  //\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('travelApp')\n  .factory('Trip', Trip);\n\nTrip.$inject = ['$resource'];\nfunction Trip($resource) {\n  return new $resource('/trips/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .service('TripService', TripService);\n\nTripService.$inject = ['$window'];\nfunction TripService($window) {\n\n  function saveTrip(tripData) {\n    $window.localStorage.setItem('tripData', JSON.stringify(tripData));\n  }\n\n  function getTrip() {\n    return JSON.parse($window.localStorage.getItem('tripData'));\n  }\n\n  function deleteTrip() {\n    return $window.localStorage.removeItem('tripData');\n  }\n\n  this.saveTrip = saveTrip;\n  this.getTrip = getTrip;\n  this.deleteTrip = deleteTrip;\n}\n"]}