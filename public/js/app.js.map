{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/budgetPlanner.js","js/services/flightService.js","js/controllers/locations.js","js/models/locations.js","js/controllers/locationsForms.js","js/controllers/locationsShow.js","js/controllers/main.js","js/models/trips.js","js/services/tripService.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","BudgetPlannerController","Location","Trip","FlightService","TripService","getFlights","tripDuration","parseFloat","budgetPlanner","newTrip","duration","returnDate","moment","departDate","add","format","console","log","getPrice","origin","destAirportCode","successResponse","totalPrice","flightCost","errorResponse","createTrip","totalCost","expenses","accomCost","totalSavings","location","_id","loggedIn","isLoggedIn","$update","saveTrip","alert","isAuthenticated","get","params","destination","closestAirport","airportCode","$http","method","response","data","LocationsIndexController","locationsIndex","all","query","$resource","id","update","LocationsNewController","createLocation","locationsNew","images","tempImage","one","two","three","save","LocationsEditController","locationsEdit","LocationsShowController","locationsShow","MainController","logout","main","$window","tripData","localStorage","setItem","JSON","stringify","getTrip","parse","getItem","deleteTrip","removeItem","angular","module","config","$inject","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('travelApp', ['ngResource', 'ui.router', 'satellizer','ngMaterial'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider){\n  $stateProvider\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('locationsNew', {\n      url: '/locations/new',\n      templateUrl: '/templates/locationsNew.html',\n      controller: 'LocationsNewController as locationsNew'\n    })\n    .state('locationsEdit', {\n      url: '/locations/:id/edit',\n      templateUrl: '/templates/locationsEdit.html',\n      controller: 'LocationsEditController as locationsEdit'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'LocationsIndexController as locationsIndex'\n    })\n    .state('locationsShow', {\n      url: '/locations/:id',\n      templateUrl: '/templates/locationsShow.html',\n      controller: 'LocationsShowController as locationsShow'\n    })\n    .state('budgetPlanner', {\n      url: '/locations/:id/budget',\n      templateUrl: '/templates/budgetPlanner.html',\n      controller: 'BudgetPlannerController as budgetPlanner'\n    });\n  $urlRouterProvider.otherwise('/');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider){\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('travelApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('travelApp')\n  .controller('BudgetPlannerController', BudgetPlannerController);\n\nBudgetPlannerController.$inject= ['Location','Trip','$state', 'FlightService', '$auth', 'TripService'];\nfunction BudgetPlannerController(Location, Trip, $state, FlightService, $auth, TripService) {\n  const budgetPlanner = this;\n\n  budgetPlanner.isLoggedIn = $auth.isAuthenticated;\n  budgetPlanner.newTrip = {};\n\n  Location.get($state.params, (location) => {\n    budgetPlanner.newTrip = {\n      origin: 'LGW',\n      destination: location.closestAirport,\n      destAirportCode: location.airportCode,\n      duration: 1,\n      flightCost: 0,\n      accomCost: 0,\n      expenses: 0,\n      totalSavings: 0,\n      totalCost: 0\n    };\n  });\n\n\n  function getFlights() {\n\n    // budgetPlanner.newTrip.flightCost = 500;\n\n    // add duration to start date to get end date\n    const tripDuration = parseFloat(budgetPlanner.newTrip.duration);\n\n    budgetPlanner.newTrip.returnDate = moment(budgetPlanner.newTrip.departDate).add(tripDuration, 'days').format('YYYY-MM-DD');\n    console.log(budgetPlanner.newTrip.returnDate);\n\n    // if no results, add 7 days to start date and end date\n\n\n\n    FlightService\n      .getPrice(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate)\n      .then(\n        (successResponse) => {\n          console.log(successResponse);\n          if (successResponse.totalPrice === 0) {\n            console.log('no results found');\n\n            // Re-run search with different date if no flights found\n\n            // FlightService\n            //   .getPrice(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate)\n            //   .then(successResponse => {\n            //\n            //   }, errorResponse => {\n            //\n            //   });\n\n          // If flights found, update newTrip with price\n          } else {\n            console.log('flights found!');\n            console.log(successResponse);\n            budgetPlanner.newTrip.flightCost = successResponse.totalPrice;\n          }\n        },\n        errorResponse => {\n          console.log('Could not retrieve price:', errorResponse);\n        }\n    );\n  }\n\n  function createTrip() {\n    // Calculate total cost\n    budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n    // Get the location id\n    budgetPlanner.newTrip.location = budgetPlanner.location._id;\n\n    console.log(budgetPlanner.newTrip);\n\n    // Check if user is logged in\n    const loggedIn = budgetPlanner.isLoggedIn();\n    // Trip.save(budgetPlanner.newTrip, () => {\n    //   console.log('saved!');\n\n      if (loggedIn) {\n        console.log('Logged in!');\n        // if user is logged in, add reference to user\n        budgetPlanner.newTrip.$update(() => {\n          console.log(budgetPlanner.newTrip);\n        });\n      } else {\n        console.log('Logged out!');\n        // if user isn't logged in, add trip id to local storage, get them to sign in, then add reference to user id to trip (id from local storage)\n        TripService.saveTrip(budgetPlanner.newTrip);\n        // now go to login/register\n        alert('You need to be signed in to save a trip');\n        $state.go('register');\n      }\n    // });\n\n  }\n\n  budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n  budgetPlanner.createTrip = createTrip;\n  budgetPlanner.getFlights = getFlights;\n}\n","angular.module('travelApp')\n  .service('FlightService', FlightService);\n\nFlightService.$inject = ['$http'];\nfunction FlightService($http) {\n\n  function getPrice(origin, destination, departDate, returnDate) {\n\n    return $http({\n      method: 'GET',\n      url: '/flights',\n      params: {\n        origin,\n        destination,\n        departDate,\n        returnDate\n      }\n    }).then(function successCallback(response) {\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getPrice = getPrice;\n}\n","angular.module('travelApp')\n  .controller('LocationsIndexController', LocationsIndexController);\n\nLocationsIndexController.$inject = ['Location'];\n\nfunction LocationsIndexController(Location) {\n  const locationsIndex = this;\n\n  locationsIndex.all = Location.query();\n  console.log(locationsIndex);\n}\n","angular.module('travelApp')\n  .factory('Location', Location);\n\nLocation.$inject = ['$resource'];\nfunction Location($resource) {\n  return new $resource('/locations/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .controller('LocationsEditController', LocationsEditController)\n  .controller('LocationsNewController', LocationsNewController);\n\n//////new\nLocationsNewController.$inject = ['Location', '$state'];\n\nfunction LocationsNewController(Location, $state) {\n  const locationsNew = this;\n  locationsNew.location = {};\n\n  function createLocation() {\n    locationsNew.location.images = [locationsNew.location.tempImage.one, locationsNew.location.tempImage.two, locationsNew.location.tempImage.three];\n    Location.save(locationsNew.location, () => {\n      $state.go('login');\n    });\n  }\n  locationsNew.createLocation = createLocation;\n}\n\n//edit\nLocationsEditController.$inject = ['Location', '$state'];\n\nfunction LocationsEditController(location, $state) {\n  const locationsEdit = this;\n  locationsEdit.location = location.get($state.params);\n\n  function update() {\n    location.update({ id: locationsEdit.location._id }, locationsEdit.location, () => {\n      $state.go('login', $state.params);\n\n\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('travelApp')\n  .controller('LocationsShowController', LocationsShowController);\n\nLocationsShowController.$inject = ['Location', '$state'];\n\nfunction LocationsShowController(Location, $state) {\n  const locationsShow = this;\n\n  locationsShow.location = Location.get($state.params);\n  console.log(locationsShow.location);\n\n}\n","angular.module('travelApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\n//MainController.$inject = ['$auth', '$state', '$rootScope'];\n//function MainController($auth, $state, $rootScope) {\n\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  // main.message = null;\n  // const protectedStates = ['filmsEdit', 'filmsNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n  //\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('travelApp')\n  .factory('Trip', Trip);\n\nTrip.$inject = ['$resource'];\nfunction Trip($resource) {\n  return new $resource('/trips/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .service('TripService', TripService);\n\nTripService.$inject = ['$window'];\nfunction TripService($window) {\n\n  function saveTrip(tripData) {\n    $window.localStorage.setItem('tripData', JSON.stringify(tripData));\n  }\n\n  function getTrip() {\n    return JSON.parse($window.localStorage.getItem('tripData'));\n  }\n\n  function deleteTrip() {\n    return $window.localStorage.removeItem('tripData');\n  }\n\n  this.saveTrip = saveTrip;\n  this.getTrip = getTrip;\n  this.deleteTrip = deleteTrip;\n}\n"]}