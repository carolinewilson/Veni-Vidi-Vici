{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/budgetPlanner.js","js/services/flightService.js","js/controllers/locations.js","js/models/locations.js","js/controllers/locationsForms.js","js/controllers/locationsShow.js","js/controllers/main.js","js/models/trips.js","js/services/tripService.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","TripService","Trip","submit","signup","register","user","then","data","tripData","getTrip","_id","save","res","console","log","deleteTrip","go","this","LoginController","login","credentials","BudgetPlannerController","Location","FlightService","getFlights","budgetPlanner","newTrip","flightCost","tripDuration","parseFloat","duration","returnDate","moment","departDate","add","format","createTrip","totalCost","expenses","accomCost","totalSavings","location","loggedIn","isLoggedIn","$update","saveTrip","alert","isAuthenticated","get","params","origin","destination","closestAirport","destAirportCode","airportCode","$http","getPrice","method","response","LocationsIndexController","locationsIndex","all","query","$resource","id","update","LocationsNewController","createLocation","locationsNew","images","tempImage","one","two","three","LocationsEditController","locationsEdit","LocationsShowController","locationsShow","MainController","logout","main","$window","localStorage","setItem","JSON","stringify","parse","getItem","removeItem","angular","module","config","$inject","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('travelApp', ['ngResource', 'ui.router', 'satellizer','ngMaterial'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider){\n  $stateProvider\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('locationsNew', {\n      url: '/locations/new',\n      templateUrl: '/templates/locationsNew.html',\n      controller: 'LocationsNewController as locationsNew'\n    })\n    .state('locationsEdit', {\n      url: '/locations/:id/edit',\n      templateUrl: '/templates/locationsEdit.html',\n      controller: 'LocationsEditController as locationsEdit'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'LocationsIndexController as locationsIndex'\n    })\n    .state('locationsShow', {\n      url: '/locations/:id',\n      templateUrl: '/templates/locationsShow.html',\n      controller: 'LocationsShowController as locationsShow'\n    })\n    .state('budgetPlanner', {\n      url: '/locations/:id/budget',\n      templateUrl: '/templates/budgetPlanner.html',\n      controller: 'BudgetPlannerController as budgetPlanner'\n    });\n  $urlRouterProvider.otherwise('/');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider){\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('travelApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state', 'TripService','Trip'];\nfunction RegisterController($auth, $state, TripService, Trip) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((data) => {\n        const tripData = TripService.getTrip();\n        tripData.user = data.data.user._id;\n\n        if (tripData) {\n          Trip.save(tripData, (res) => {\n            console.log('saved trip! ', res);\n            TripService.deleteTrip();\n          });\n        }\n\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state', 'TripService', 'Trip'];\nfunction LoginController($auth, $state, TripService, Trip) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((data) => {\n\n        const tripData = TripService.getTrip();\n        tripData.user = data.data.user._id;\n\n        if (tripData) {\n          Trip.save(tripData, (res) => {\n            console.log('saved trip! ', res);\n            TripService.deleteTrip();\n          });\n        }\n\n        $state.go('home');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('travelApp')\n  .controller('BudgetPlannerController', BudgetPlannerController);\n\nBudgetPlannerController.$inject= ['Location','Trip','$state', 'FlightService', '$auth', 'TripService'];\nfunction BudgetPlannerController(Location, Trip, $state, FlightService, $auth, TripService) {\n  const budgetPlanner = this;\n\n  budgetPlanner.isLoggedIn = $auth.isAuthenticated;\n  budgetPlanner.newTrip = {};\n  budgetPlanner.location = Location.get($state.params);\n\n  Location.get($state.params, (location) => {\n    budgetPlanner.newTrip = {\n      origin: 'LGW',\n      destination: location.closestAirport,\n      destAirportCode: location.airportCode,\n      duration: 7,\n      flightCost: 0,\n      accomCost: 0,\n      expenses: 0,\n      totalSavings: 0,\n      totalCost: 0\n    };\n  });\n\n\n  function getFlights() {\n\n    budgetPlanner.newTrip.flightCost = 500;\n\n    // add duration to start date to get end date\n    const tripDuration = parseFloat(budgetPlanner.newTrip.duration);\n\n    budgetPlanner.newTrip.returnDate = moment(budgetPlanner.newTrip.departDate).add(tripDuration, 'days').format('YYYY-MM-DD');\n    console.log(budgetPlanner.newTrip.returnDate);\n\n    // if no results, add 7 days to start date and end date\n\n    // FlightService\n    //   .getPrice(budgetPlanner.newTrip.origin, budgetPlanner.newTrip.destAirportCode, budgetPlanner.newTrip.departDate, budgetPlanner.newTrip.returnDate)\n    //   .then(\n    //     (successResponse) => {\n    //       console.log(successResponse);\n    //       if (successResponse.totalPrice === 0) {\n    //         console.log('no results found');\n    //\n    //         // Re-run search with different date if no flights found\n    //\n    //\n    //       // If flights found, update newTrip with price\n    //       } else {\n    //         console.log('flights found!');\n    //         console.log(successResponse);\n    //         budgetPlanner.newTrip.flightCost = successResponse.totalPrice;\n    //       }\n    //     },\n    //     errorResponse => {\n    //       console.log('Could not retrieve price:', errorResponse);\n    //     }\n    // );\n  }\n\n  function createTrip() {\n    // Calculate total cost\n    budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n    // Get the location id\n    console.log(budgetPlanner.location);\n    budgetPlanner.newTrip.location = budgetPlanner.location._id;\n\n    console.log(budgetPlanner.newTrip);\n\n    // Check if user is logged in\n    const loggedIn = budgetPlanner.isLoggedIn();\n    // Trip.save(budgetPlanner.newTrip, () => {\n    //   console.log('saved!');\n\n      if (loggedIn) {\n        console.log('Logged in!');\n        // if user is logged in, add reference to user\n        budgetPlanner.newTrip.$update(() => {\n          console.log(budgetPlanner.newTrip);\n        });\n      } else {\n        console.log('Logged out!');\n        // if user isn't logged in, add trip id to local storage, get them to sign in, then add reference to user id to trip (id from local storage)\n        TripService.saveTrip(budgetPlanner.newTrip);\n        // now go to login/register\n        alert('You need to be signed in to save a trip');\n        $state.go('register');\n      }\n    // });\n\n  }\n\n  budgetPlanner.newTrip.totalCost = budgetPlanner.newTrip.flightCost + budgetPlanner.newTrip.expenses + budgetPlanner.newTrip.accomCost - budgetPlanner.newTrip.totalSavings;\n\n  budgetPlanner.createTrip = createTrip;\n  budgetPlanner.getFlights = getFlights;\n}\n","angular.module('travelApp')\n  .service('FlightService', FlightService);\n\nFlightService.$inject = ['$http'];\nfunction FlightService($http) {\n\n  function getPrice(origin, destination, departDate, returnDate) {\n\n    return $http({\n      method: 'GET',\n      url: '/flights',\n      params: {\n        origin,\n        destination,\n        departDate,\n        returnDate\n      }\n    }).then(function successCallback(response) {\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getPrice = getPrice;\n}\n","angular.module('travelApp')\n  .controller('LocationsIndexController', LocationsIndexController);\n\nLocationsIndexController.$inject = ['Location'];\n\nfunction LocationsIndexController(Location) {\n  const locationsIndex = this;\n\n  locationsIndex.all = Location.query();\n  console.log(locationsIndex);\n}\n","angular.module('travelApp')\n  .factory('Location', Location);\n\nLocation.$inject = ['$resource'];\nfunction Location($resource) {\n  return new $resource('/locations/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .controller('LocationsEditController', LocationsEditController)\n  .controller('LocationsNewController', LocationsNewController);\n\n//////new\nLocationsNewController.$inject = ['Location', '$state'];\n\nfunction LocationsNewController(Location, $state) {\n  const locationsNew = this;\n  locationsNew.location = {};\n\n  function createLocation() {\n    locationsNew.location.images = [locationsNew.location.tempImage.one, locationsNew.location.tempImage.two, locationsNew.location.tempImage.three];\n    Location.save(locationsNew.location, () => {\n      $state.go('login');\n    });\n  }\n  locationsNew.createLocation = createLocation;\n}\n\n//edit\nLocationsEditController.$inject = ['Location', '$state'];\n\nfunction LocationsEditController(location, $state) {\n  const locationsEdit = this;\n  locationsEdit.location = location.get($state.params);\n\n  function update() {\n    location.update({ id: locationsEdit.location._id }, locationsEdit.location, () => {\n      $state.go('login', $state.params);\n\n\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('travelApp')\n  .controller('LocationsShowController', LocationsShowController);\n\nLocationsShowController.$inject = ['Location', '$state'];\n\nfunction LocationsShowController(Location, $state) {\n  const locationsShow = this;\n\n  locationsShow.location = Location.get($state.params);\n  console.log(locationsShow.location);\n\n}\n","angular.module('travelApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\n//MainController.$inject = ['$auth', '$state', '$rootScope'];\n//function MainController($auth, $state, $rootScope) {\n\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  // main.message = null;\n  // const protectedStates = ['filmsEdit', 'filmsNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n  //\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('travelApp')\n  .factory('Trip', Trip);\n\nTrip.$inject = ['$resource'];\nfunction Trip($resource) {\n  return new $resource('/trips/:id', { id: '@_id' }, {\n    update: {method: 'PUT'}\n  });\n}\n","angular.module('travelApp')\n  .service('TripService', TripService);\n\nTripService.$inject = ['$window'];\nfunction TripService($window) {\n\n  function saveTrip(tripData) {\n    $window.localStorage.setItem('tripData', JSON.stringify(tripData));\n  }\n\n  function getTrip() {\n    return JSON.parse($window.localStorage.getItem('tripData'));\n  }\n\n  function deleteTrip() {\n    return $window.localStorage.removeItem('tripData');\n  }\n\n  this.saveTrip = saveTrip;\n  this.getTrip = getTrip;\n  this.deleteTrip = deleteTrip;\n}\n"]}